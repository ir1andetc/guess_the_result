console.log('number' + 3 + 3)

/*
1. Вираз 'number' буде перетворено у стрічку, так як перше значення - стрічка. 
2. Далі будет відбувається конкатенація стрічки 'number' з числами 3 та 3.
Результат: 'number33'
*/

console.log(null + 3)

/*
1. null буде перетворено в число 0, оскільки воно не має значення.
2. Далі відбувається додавання числа 3.
Результат: 3
*/

console.log(null && "qwerty")

/*
1. Оператор && повертає перше значення, якщо воно false, або друге значення, якщо обидва true.
2. У цьому випадку обидва значення true, тому повертається друге значення - "qwerty".

На прикладі виразу "null && "qwerty"" ми отримаємо результат "null" так як перше буде false

Результат: "qwerty"
*/

console.log(+'40' + +'2' + "hillel")

/*
1. Унарний плюс перед стрічками перетворює їх у числа.
2. Потім відбувається додавання чисел 40 та 2, 
3. Після відбувається конкатенація з стрічкою "hillel"

У разі віразу "'40' + '2' + "hillel"" в нас просто вийде конкотенація стрічок зі значеннями
У разі додавання унарного плюсу перед стрічкою "hillel" (повний вираз +'40' + +'2' + +"hillel") 
ми отримаємо NaN так як не можемо додавати чісла до стрічок

Результат: 42hillel
*/

console.log('10' - 5 === 6)

/*
1. Спочатку відбувається віднімання числа 5 від стрічкового числа '10', яке перетворюється у число.
2. Потім порівнюється результат виразу з числом 6. Так як 5 не дорівнює 6, то ...
Результат: false
*/

console.log(true + false)

/*
1. true перетворюється в 1, а false в 0.
2. Потім відбувається додавання числа 1 до числа 0.
Результат: 1
*/

console.log('4px' - 3)

/*
Стрічка '4px' не може бути віднята від числа чи навпакі, тому виникає NaN.
Результат: NaN
*/

console.log('4' - 3)

/*
Стрічка '4' перетворюється у число, і відбувається віднімання числа 3 від числа 4.
Результат: 1
*/

console.log('6' + 3 ** 0)

/*
1. ** - оператор піднесення до степеня. 3 ** 0 дорівнює 1.
2. Потім відбувається конкатенація стрічки '6' з числом 1.
Результат: '61'
*/

console.log(12 / '6')

/*
Стрічка '6' перетворюється у число, і відбувається ділення числа 12 на число 6.
Результат: 2
*/

console.log('10' + (5 === 6))

/*
1. Вираз (5 === 6) повертає false, яке перетворюється у стрічку.
2. Потім відбувається конкатенація стрічки '10' з стрічкою 'false'.
Результат: '10false'
*/

console.log(null == '')

/*
null перетворюється в 0, а пуста стрічка теж в 0.
Результат: false
*/

console.log(3 ** (9 / 3))

/*
1. Спочатку відбувається обчислення виразу всередині дужок (9 / 3), що дорівнює 3.
2. Потім відбувається піднесення числа 3 до степеня 3.
Результат: 27
*/

console.log(!!'false' == !!'true')

/*
1. !! приводить значення до типу Boolean.
2. Обидва значення перетворюються в true.
3. Потім порівнюються два true.
Результат: true
*/

console.log(0 || '0' && 1)

/*
1. Оператор || повертає перше значення, якщо воно true, інакше - друге.
2. Оператор && повертає перше значення, якщо обидва true, інакше - false.
3. Операція && має більший пріоритет порівняно з операцією ||, тому спочатку вона буде оброблена.
4. Операція && поверне 1, оскільки обидва операнди є true.
5. Операція || поверне перший операнд, оскільки він true.

Результат: 1
*/

console.log((+null == false) < 1)

/*
1. null перетворюється в 0, а false теж в 0.
2. Вираз (+null == false) дорівнює true, тому true перетворюється в 1.
3. Потім відбувається порівняння 1 < 1.
Результат: false
*/

console.log(false && true || true)

/*
1. Оператор && повертає false, якщо одне зі значень false.
2. Оператор || повертає true, якщо одне зі значень true.

Операція && має більший пріоритет порівняно з операцією ||, тому спочатку вона буде оброблена.

Результат: true
*/

console.log(false && (false || true))

/*
1. Спочатку вираження в дужках оцінюється до true.
2. Потім відбувається логічне множення false на true.
Результат: false
*/

console.log((+null == false) < 1 ** 5)

/*
1. null перетворюється в 0, а false також в 0.
2. Вираз (+null == false) оцінюється до true, оскільки 0 рівне 0.
3. true перетворюється в 1.
4. Вираз 1 ** 5 підносить 1 до степеня 5, отримуючи 1.
5. Потім відбувається порівняння 1 < 1.
Результат: false.
*/